Pre-meeting:

  allow breaking out of command loop on robot
  return values of some commands are being reported strangely, test with robot.up() etc
  update readme
  render map data that gets sent to web client

  Scanner:
    figure out new data format to allow various scan volumes
    make the data format smaller as well?
    send scans in smaller batches
    see if code can be optimized to use less memory

  Renderer:
    switch over to whatever the new data format will be
    color cubes based on hardness

  Add buttons for commonly used robot commands (i.e. forward, back, place, dig)


Post-meeting:

  stop command input from sending on blur (caused by using change event)

  mapping:
    add dead reckoning for robots
    update scene with new scan data after moving
    Set up database
    persistent server side maps that robots can read
    add ability to send scans to different maps
    detect maximum scan batch size based on available memory
    don't add to the scene any voxels which are surrounded?

  Add ability to send commands to different robots
  Add password to commands, different per robot
    store hashed password with random salt in db
    also store hash on robot, check only that hash for commands

  display contents of robot inventory and current selected space


distant future:
  implement minecraft player style inventory manipulation on web-client
  prediction for inventory and movement?
  blueprint storage and rendering
  neural network to help predict block ids from hardness maps
